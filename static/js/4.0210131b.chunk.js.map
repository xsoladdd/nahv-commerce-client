{"version":3,"sources":["utils/axiosInstance.ts","constants.tsx","api/Mutations.ts","pages/Login/validations.ts","pages/Login/Login.tsx","pages/Login/index.tsx"],"names":["axiosInstance","axiosCore","create","defaults","headers","common","cookies","get","HOST","process","register","a","data","post","res","login","loginSchema","Yup","shape","password","min","max","required","email","Login","useState","message","variant","customMessage","setCustomMessage","history","useHistory","mutateAsync","useMutation","props","onSuccess","status","Cookies","set","token","expires","push","Container","className","initialValues","validationSchema","onSubmit","debounce","values","setSubmitting","isSubmitting","errors","touched","handleSubmit","Form","noValidate","Group","controlId","Label","Control","as","Field","type","placeholder","value","isInvalid","Text","Alert","Button","disabled"],"mappings":"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","file":"static/js/4.0210131b.chunk.js","sourcesContent":["import axiosCore from \"axios\";\nimport cookies from \"js-cookie\";\n\nconst axiosInstance = axiosCore.create();\n\naxiosInstance.defaults.headers.common[\"Authorization\"] =\n  cookies.get(\"access_token\");\n\nexport default axiosInstance;\n","export const HOST: String = process.env.REACT_APP_API_SERVER\n  ? process.env.REACT_APP_API_SERVER\n  : \"\";\n","// import cookies from \"js-cookie\";\nimport cookies from \"js-cookie\";\nimport axiosInstance from \"src/utils/axiosInstance\";\nimport { loginParameters, registerParameters } from \"./interface\";\nimport { HOST } from \"src/constants\";\n\nexport const register = async ({ data }: registerParameters) => {\n  const res = await axiosInstance.post(`${HOST}/register`, data);\n  return res.data;\n};\n\nexport const login = async ({ data }: loginParameters) => {\n  const res = await axiosInstance.post(`${HOST}/login`, data);\n  return res.data;\n};\n","import * as Yup from \"yup\";\n\nexport const loginSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(8, \"Too Short!\")\n    .max(15, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n});\n","//import React from 'react'\n\nimport React, { useState } from \"react\";\nimport { Alert, Button, Container, Form } from \"react-bootstrap\";\nimport { LoginInterface, LoginProps } from \"./interface\";\nimport { Formik, Field, FormikHelpers } from \"formik\";\nimport { login } from \"src/api/Mutations\";\nimport { loginSchema } from \"./validations\";\nimport { useMutation } from \"react-query\";\nimport { loginParameters } from \"src/api/interface\";\nimport { debounce } from \"lodash\";\nimport { MessageState } from \"../Register/interface\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport Cookies from \"js-cookie\";\n\nconst Login: React.FC<LoginProps> = ({}) => {\n  const [customMessage, setCustomMessage] = useState<MessageState>({\n    message: \"\",\n    variant: \"danger\",\n  });\n  const history = useHistory();\n  const { mutateAsync } = useMutation(\n    (props: loginParameters) => login(props),\n    {\n      onSuccess: (data) => {\n        if (data.status === 401) {\n          return setCustomMessage({\n            message: data.message,\n            variant: \"danger\",\n          });\n        }\n        Cookies.set(\"access_token\", data.token, { expires: 7 });\n        return history.push(\"/\");\n        // return setCustomMessage({\n        //   message: data.message,\n        //   variant: \"success\",\n        // });\n      },\n    }\n  );\n  return (\n    <Container className=\"pt-5\">\n      <blockquote className=\"blockquote text-center\">\n        {/* <p className=\"display-4 mb-0\">Register</p> */}\n        <h1 className=\" mb-0\">Register</h1>\n        <footer className=\"blockquote-footer\">\n          Please authenticate to join us\n        </footer>\n      </blockquote>\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={loginSchema}\n        onSubmit={debounce(\n          async (\n            values: LoginInterface,\n            { setSubmitting }: FormikHelpers<LoginInterface>\n          ) => {\n            await mutateAsync({ data: values });\n            setSubmitting(false);\n          },\n          1000\n        )}\n      >\n        {({ isSubmitting, values, errors, touched, handleSubmit }) => (\n          <Form onSubmit={handleSubmit} noValidate>\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control\n                as={Field}\n                type=\"email\"\n                placeholder=\"Enter email\"\n                value={values.email}\n                isInvalid={touched.email && !!errors.email}\n              />\n              {errors.email && touched.email ? (\n                <Form.Text className=\"invalid-feedback pl-2\">\n                  {errors.email}\n                </Form.Text>\n              ) : null}\n            </Form.Group>\n            <Form.Group controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                as={Field}\n                type=\"password\"\n                placeholder=\"Password\"\n                value={values.password}\n                isInvalid={touched.password && !!errors.password}\n              />\n              {errors.password && touched.password ? (\n                <Form.Text className=\"invalid-feedback pl-2\">\n                  {errors.password}\n                </Form.Text>\n              ) : null}\n            </Form.Group>\n\n            {customMessage.message && (\n              <Alert variant={customMessage.variant}>\n                {customMessage.message}\n              </Alert>\n            )}\n\n            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? `Loading...` : \"Login \"}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\nexport default Login;\n","import Login from \"./Login\";\nexport default Login;\n"],"sourceRoot":""}